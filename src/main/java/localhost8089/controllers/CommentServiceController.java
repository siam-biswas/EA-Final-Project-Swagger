/*
 * EAFinalProjectLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost8089.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost8089.ApiHelper;
import localhost8089.Server;
import localhost8089.exceptions.ApiException;
import localhost8089.http.request.HttpMethod;
import localhost8089.models.AddCommentRequest;
import localhost8089.models.UpdateCommentRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CommentServiceController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CommentServiceController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getComments() throws ApiException, IOException {
        prepareGetCommentsRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getCommentsAsync() {
        try { 
            return prepareGetCommentsRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getComments.
     */
    private ApiCall<Void, ApiException> prepareGetCommentsRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/comments")
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getComment() throws ApiException, IOException {
        prepareGetCommentRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getCommentAsync() {
        try { 
            return prepareGetCommentRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getComment.
     */
    private ApiCall<Void, ApiException> prepareGetCommentRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/comments/2")
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateComment(
            final UpdateCommentRequest body) throws ApiException, IOException {
        prepareUpdateCommentRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateCommentAsync(
            final UpdateCommentRequest body) {
        try { 
            return prepareUpdateCommentRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateComment.
     */
    private ApiCall<Void, ApiException> prepareUpdateCommentRequest(
            final UpdateCommentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/comments/update")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteComment() throws ApiException, IOException {
        prepareDeleteCommentRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteCommentAsync() {
        try { 
            return prepareDeleteCommentRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteComment.
     */
    private ApiCall<Void, ApiException> prepareDeleteCommentRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/comments/delete/1")
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void addComment(
            final AddCommentRequest body) throws ApiException, IOException {
        prepareAddCommentRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> addCommentAsync(
            final AddCommentRequest body) {
        try { 
            return prepareAddCommentRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addComment.
     */
    private ApiCall<Void, ApiException> prepareAddCommentRequest(
            final AddCommentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/comments/add")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}