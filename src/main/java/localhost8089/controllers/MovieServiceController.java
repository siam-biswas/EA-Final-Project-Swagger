/*
 * EAFinalProjectLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost8089.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost8089.ApiHelper;
import localhost8089.Server;
import localhost8089.exceptions.ApiException;
import localhost8089.http.request.HttpMethod;
import localhost8089.models.AddMovieRequest;
import localhost8089.models.UpdateMovieRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MovieServiceController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public MovieServiceController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getMovies() throws ApiException, IOException {
        prepareGetMoviesRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getMoviesAsync() {
        try { 
            return prepareGetMoviesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getMovies.
     */
    private ApiCall<Void, ApiException> prepareGetMoviesRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies/getallmovies")
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  movieId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getMovie(
            final int movieId) throws ApiException, IOException {
        prepareGetMovieRequest(movieId).execute();
    }

    /**
     * @param  movieId  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getMovieAsync(
            final int movieId) {
        try { 
            return prepareGetMovieRequest(movieId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getMovie.
     */
    private ApiCall<Void, ApiException> prepareGetMovieRequest(
            final int movieId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies/getbyid")
                        .queryParam(param -> param.key("movieId")
                                .value(movieId).isRequired(false))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  filterType  Required parameter: Example:
     * @param  value  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void filterMovies(
            final String filterType,
            final String value) throws ApiException, IOException {
        prepareFilterMoviesRequest(filterType, value).execute();
    }

    /**
     * @param  filterType  Required parameter: Example:
     * @param  value  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> filterMoviesAsync(
            final String filterType,
            final String value) {
        try { 
            return prepareFilterMoviesRequest(filterType, value).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for filterMovies.
     */
    private ApiCall<Void, ApiException> prepareFilterMoviesRequest(
            final String filterType,
            final String value) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies/filter")
                        .queryParam(param -> param.key("filterType")
                                .value(filterType))
                        .queryParam(param -> param.key("value")
                                .value(value))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateMovie(
            final UpdateMovieRequest body) throws ApiException, IOException {
        prepareUpdateMovieRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateMovieAsync(
            final UpdateMovieRequest body) {
        try { 
            return prepareUpdateMovieRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateMovie.
     */
    private ApiCall<Void, ApiException> prepareUpdateMovieRequest(
            final UpdateMovieRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  movieId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteMovie(
            final int movieId) throws ApiException, IOException {
        prepareDeleteMovieRequest(movieId).execute();
    }

    /**
     * @param  movieId  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteMovieAsync(
            final int movieId) {
        try { 
            return prepareDeleteMovieRequest(movieId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteMovie.
     */
    private ApiCall<Void, ApiException> prepareDeleteMovieRequest(
            final int movieId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies")
                        .queryParam(param -> param.key("movieId")
                                .value(movieId).isRequired(false))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void addMovie(
            final AddMovieRequest body) throws ApiException, IOException {
        prepareAddMovieRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> addMovieAsync(
            final AddMovieRequest body) {
        try { 
            return prepareAddMovieRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addMovie.
     */
    private ApiCall<Void, ApiException> prepareAddMovieRequest(
            final AddMovieRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/movies")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}