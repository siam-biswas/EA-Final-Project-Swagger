/*
 * EAFinalProjectLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost8089.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import localhost8089.ApiHelper;
import localhost8089.Server;
import localhost8089.exceptions.ApiException;
import localhost8089.http.request.HttpMethod;
import localhost8089.models.AddSeriesRequest;
import localhost8089.models.UpdateSeriesRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SeriesServiceController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SeriesServiceController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getSerieses() throws ApiException, IOException {
        prepareGetSeriesesRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getSeriesesAsync() {
        try { 
            return prepareGetSeriesesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSerieses.
     */
    private ApiCall<Void, ApiException> prepareGetSeriesesRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries/finallseries")
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void getSeries() throws ApiException, IOException {
        prepareGetSeriesRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> getSeriesAsync() {
        try { 
            return prepareGetSeriesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSeries.
     */
    private ApiCall<Void, ApiException> prepareGetSeriesRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries/1")
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  filterType  Required parameter: Example:
     * @param  value  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void filterSeriess(
            final String filterType,
            final String value) throws ApiException, IOException {
        prepareFilterSeriessRequest(filterType, value).execute();
    }

    /**
     * @param  filterType  Required parameter: Example:
     * @param  value  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> filterSeriessAsync(
            final String filterType,
            final String value) {
        try { 
            return prepareFilterSeriessRequest(filterType, value).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for filterSeriess.
     */
    private ApiCall<Void, ApiException> prepareFilterSeriessRequest(
            final String filterType,
            final String value) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries/filter")
                        .queryParam(param -> param.key("filterType")
                                .value(filterType))
                        .queryParam(param -> param.key("value")
                                .value(value))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updateSeries(
            final UpdateSeriesRequest body) throws ApiException, IOException {
        prepareUpdateSeriesRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updateSeriesAsync(
            final UpdateSeriesRequest body) {
        try { 
            return prepareUpdateSeriesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateSeries.
     */
    private ApiCall<Void, ApiException> prepareUpdateSeriesRequest(
            final UpdateSeriesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteSeries() throws ApiException, IOException {
        prepareDeleteSeriesRequest().execute();
    }

    /**
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteSeriesAsync() {
        try { 
            return prepareDeleteSeriesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteSeries.
     */
    private ApiCall<Void, ApiException> prepareDeleteSeriesRequest() throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries/1")
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void addSeries(
            final AddSeriesRequest body) throws ApiException, IOException {
        prepareAddSeriesRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> addSeriesAsync(
            final AddSeriesRequest body) {
        try { 
            return prepareAddSeriesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addSeries.
     */
    private ApiCall<Void, ApiException> prepareAddSeriesRequest(
            final AddSeriesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/tvseries")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}