/*
 * EAFinalProjectLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost8089.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import localhost8089.ApiHelper;
import localhost8089.EAFinalProjectClient;
import localhost8089.exceptions.ApiException;
import localhost8089.models.AddMovieRequest;
import localhost8089.models.UpdateMovieRequest;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class MovieServiceControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static EAFinalProjectClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static MovieServiceController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getMovieServiceController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for Get Movies.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetMovies() throws Exception {

        // Set callback and perform API call
        try {
            controller.getMovies();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Get Movie.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetMovie() throws Exception {
        // Parameters for the API call
        int movieId = 1;

        // Set callback and perform API call
        try {
            controller.getMovie(movieId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Filter Movies.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testFilterMovies() throws Exception {
        // Parameters for the API call
        String filterType = 
                "ACTOR";
        String value = 
                "Morgan";

        // Set callback and perform API call
        try {
            controller.filterMovies(filterType, value);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Update Movie.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateMovie() throws Exception {
        // Parameters for the API call
        UpdateMovieRequest body = ApiHelper.deserialize(
                "{\r\n  \"id\": 1,\r\n  \"durationInMinutes\": 162,\r\n  \"genre\": \"Drama\",\r\n "
                + " \"director\": \"Frank Darabont\",\r\n  \"releaseDate\": \"1994-09-10\",\r\n  "
                + "\"title\": \"The Shawshank Redemption\"\r\n}",
                UpdateMovieRequest.class);

        // Set callback and perform API call
        try {
            controller.updateMovie(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Delete Movie.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDeleteMovie() throws Exception {
        // Parameters for the API call
        int movieId = 1;

        // Set callback and perform API call
        try {
            controller.deleteMovie(movieId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Add Movie.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testAddMovie() throws Exception {
        // Parameters for the API call
        AddMovieRequest body = ApiHelper.deserialize(
                "{\r\n  \"durationInMinutes\": 162,\r\n  \"genre\": \"Drama\",\r\n  \"director\": "
                + "\"Frank Darabont\",\r\n  \"releaseDate\": \"1994-09-10\",\r\n  \"title\": \"The "
                + "Shawshank Redemption\"\r\n}",
                AddMovieRequest.class);

        // Set callback and perform API call
        try {
            controller.addMovie(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
