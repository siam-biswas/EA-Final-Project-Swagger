/*
 * EAFinalProjectLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost8089.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import localhost8089.ApiHelper;
import localhost8089.EAFinalProjectClient;
import localhost8089.exceptions.ApiException;
import localhost8089.models.AddFavoriteRequest;
import localhost8089.models.LoginUserRequest;
import localhost8089.models.RegisterUserRequest;
import localhost8089.models.UpdateFavoriteRequest;
import localhost8089.models.UpdateUserRequest;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class UserServiceControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static EAFinalProjectClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static UserServiceController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getUserServiceController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for Retrive Access Token.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRetriveAccessToken() throws Exception {
        // Parameters for the API call
        int xCSRFTOKEN = 1;

        // Set callback and perform API call
        try {
            controller.retriveAccessToken(xCSRFTOKEN);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Register User.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRegisterUser() throws Exception {
        // Parameters for the API call
        RegisterUserRequest body = ApiHelper.deserialize(
                "{\r\n  \"userName\": \"nsRahman\",\r\n  \"firstName\": \"NS\",\r\n  \"lastName\": "
                + "\"Rahman\",\r\n  \"email\": \"nsr@miu.edu\",\r\n  \"phone\": \"641233000\",\r\n "
                + " \"password\": \"123456\"\r\n}",
                RegisterUserRequest.class);

        // Set callback and perform API call
        try {
            controller.registerUser(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Login User.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testLoginUser() throws Exception {
        // Parameters for the API call
        LoginUserRequest body = ApiHelper.deserialize(
                "{\r\n  \"userName\": \"nsRahman\",\r\n  \"password\": \"123456\"\r\n}",
                LoginUserRequest.class);

        // Set callback and perform API call
        try {
            controller.loginUser(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Get Users.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetUsers() throws Exception {

        // Set callback and perform API call
        try {
            controller.getUsers();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Get User.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetUser() throws Exception {

        // Set callback and perform API call
        try {
            controller.getUser();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Update User.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateUser() throws Exception {
        // Parameters for the API call
        UpdateUserRequest body = ApiHelper.deserialize(
                "{\r\n  \"id\": 2,\r\n  \"userName\": \"nsRahman\",\r\n  \"firstName\": \"NS\",\r\n"
                + "  \"lastName\": \"Rahman\",\r\n  \"email\": \"nsr@miu.edu\",\r\n  \"phone\": \"6"
                + "41233001\",\r\n  \"password\": \"123456\"\r\n}",
                UpdateUserRequest.class);

        // Set callback and perform API call
        try {
            controller.updateUser(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Delete User.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDeleteUser() throws Exception {

        // Set callback and perform API call
        try {
            controller.deleteUser();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Get Favorites.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetFavorites() throws Exception {

        // Set callback and perform API call
        try {
            controller.getFavorites();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Add Favorite.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testAddFavorite() throws Exception {
        // Parameters for the API call
        AddFavoriteRequest body = ApiHelper.deserialize(
                "{\r\n  \"content\": {\r\n    \"contentId\": 1,\r\n    \"contentType\": \"movie\"\r"
                + "\n  },\r\n  \"user_id\": 1\r\n}",
                AddFavoriteRequest.class);

        // Set callback and perform API call
        try {
            controller.addFavorite(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Update Favorite.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testUpdateFavorite() throws Exception {
        // Parameters for the API call
        UpdateFavoriteRequest body = ApiHelper.deserialize(
                "{\r\n  \"id\": 1,\r\n  \"content\": {\r\n    \"contentId\": 1,\r\n    \"contentTyp"
                + "e\": \"movie\"\r\n  },\r\n  \"user_id\": 1\r\n}",
                UpdateFavoriteRequest.class);

        // Set callback and perform API call
        try {
            controller.updateFavorite(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for Delete Favorite.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDeleteFavorite() throws Exception {

        // Set callback and perform API call
        try {
            controller.deleteFavorite();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
